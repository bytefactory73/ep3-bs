<?php
// Admin-only: Übersicht Einzahlungen
$this->setup([
    'title' => 'Einzahlungen Übersicht',
    'panel' => 'centered-panel',
    'back' => $this->url('user/drinks-admin'),
    'links' => [
        'Drinks Verwaltung' => $this->url('user/drinks-admin'),
    ],
]);
?>

<h1><?= $this->t('Einzahlungen Übersicht') ?></h1>
<div class="separator-small"></div>
<p><?= $this->t('Hier können Sie alle Einzahlungen der Nutzer einsehen und verwalten.') ?></p>

<div id="add-deposit-section" style="margin-top: 20px; margin-bottom: 20px; padding: 16px 14px 14px 14px; background: #f7faff; border-radius: 8px; box-shadow: 0 1px 6px rgba(30,60,120,0.06);">
    <h2 id="add-deposit-section-title" style="margin-top: 0; margin-bottom: 12px;"> <?= $this->t('Nutzerübersicht') ?> </h2>
    <form method="post" id="deposit-form" style="margin-bottom:2em; display: grid; grid-template-columns: 160px 1fr; gap: 10px 18px; align-items: center;">
        <label for="deposit_user_search" style="grid-column:1;">Benutzer:</label>
        <input type="text" id="deposit_user_search" name="deposit_user_search" autocomplete="off" placeholder="<?= $this->t('Benutzer suchen...') ?>" style="grid-column:2;" required />
        <input type="hidden" name="deposit_user_id" id="deposit_user_id" />
        <div id="user-search-list" style="position:relative; grid-column:2; z-index:10;"></div>

        <label for="deposit_drinks_enabled" style="grid-column:1;">Theke erlaubt:</label>
        <input type="checkbox" id="deposit_drinks_enabled" name="deposit_drinks_enabled" value="1" style="vertical-align:middle; grid-column:2; justify-self: start;">

        <div id="alias-row" style="display:none; grid-column:1 / span 2; margin-top:8px;">
            <div style="display:grid; grid-template-columns: 160px 1fr; align-items:center; gap:10px 18px;">
                <label for="deposit_alias" style="grid-column:1;">Theken-ID:</label>
                <span style="grid-column:2; display:flex; align-items:center; gap:8px;">
                    <input type="text" id="deposit_alias" name="deposit_alias" maxlength="50" style="width:200px;">
                    <button type="button" id="set-alias-btn" class="mini-button">Theken ID speichern</button>
                </span>
            </div>
        </div>

        <div id="current-balance-box" style="display:none; grid-column:1 / span 2; margin-bottom:10px; margin-top:16px; font-weight:bold; color:#2196f3;"></div>

        <label for="deposit_amount" style="grid-column:1;">Guthaben aufladen:</label>
        <input type="number" name="deposit_amount" id="deposit_amount" min="0.01" step="0.01" placeholder="<?= $this->t('Betrag') ?>" required style="grid-column:2;" />

        <label for="deposit_comment" style="grid-column:1;">Bemerkung:</label>
        <input type="text" name="deposit_comment" id="deposit_comment" maxlength="255" placeholder="<?= $this->t('Kommentar (optional)') ?>" style="grid-column:2;" />

        <button type="submit" name="add_deposit" class="default-button mini-button" style="grid-column:1 / span 2; justify-self: start;">
            <?= $this->t('Einzahlung hinzufügen') ?>
        </button>

        <!-- Drink selection row -->
        <label for="drink_select" style="grid-column:1;">Buchung nachtragen:</label>
        <select id="drink_select" name="drink_select" style="grid-column:2; width:220px;"></select>

        <label for="drink_count" style="grid-column:1;">Anzahl:</label>
        <input type="number" id="drink_count" name="drink_count" min="1" value="1" style="grid-column:2; width:80px;" />

        <label style="grid-column:1;">Gesamtpreis:</label>
        <span id="drink_total_price" style="grid-column:2; font-weight:bold; color:#388e3c;">0,00 €</span>

        <button type="button" id="add-drink-btn" class="default-button mini-button" style="grid-column:1 / span 2; justify-self: start;">
            <?= $this->t('Getränk buchen') ?>
        </button>
    </form>
</div>

<div id="user-history-section"></div>

<script>
function formatCurrency(amount) {
    return amount != null ? amount.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }) : '';
}
document.addEventListener('DOMContentLoaded', function() {
    // Build user list from PHP for JS
    var users = [
        <?php foreach ($this->users as $user): ?>
        {
            uid: "<?= (int)$user->get('uid') ?>",
            alias: "<?= $this->escapeJs($user->get('alias')) ?>",
            email: "<?= $this->escapeJs($user->get('email')) ?>",
            drinks_enabled: <?= (int)$user->getExtra('drinks_enabled') ?>,
            drinks_alias: "<?= $this->escapeJs($user->getExtra('drinks_alias')) ?>"
        },
        <?php endforeach; ?>
    ];

    // Build drinks list from PHP for JS
    var drinks = <?php
        if (isset($this->drinks) && is_array($this->drinks)) {
            $drinksArr = [];
            foreach ($this->drinks as $drink) {
                $drinksArr[] = [
                    'id' => (int)$drink['id'],
                    'name' => $drink['name'] ?? '',
                    'price' => (float)$drink['price'],
                ];
            }
            echo json_encode($drinksArr, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
        } else {
            echo '[]';
        }
    ?>;
    var userSearch = document.getElementById('deposit_user_search');
    var userIdInput = document.getElementById('deposit_user_id');
    var userSearchList = document.getElementById('user-search-list');
    var drinksEnabledCheckbox = document.getElementById('deposit_drinks_enabled');
    var aliasRow = document.getElementById('alias-row');
    var aliasInput = document.getElementById('deposit_alias');
    var balanceBox = document.getElementById('current-balance-box');
    var historySection = document.getElementById('user-history-section');
    var drinkSelect = document.getElementById('drink_select');
    var drinkCount = document.getElementById('drink_count');
    var drinkTotalPrice = document.getElementById('drink_total_price');
    var addDrinkBtn = document.getElementById('add-drink-btn');
    // Populate drinks combobox
    function renderDrinkOptions() {
        drinkSelect.innerHTML = '';
        var opt = document.createElement('option');
        opt.value = '';
        opt.textContent = '<?= $this->t('Bitte wählen...') ?>';
        drinkSelect.appendChild(opt);
        if (!Array.isArray(drinks) || drinks.length === 0) {
            var emptyOpt = document.createElement('option');
            emptyOpt.value = '';
            emptyOpt.textContent = '[Keine Getränke verfügbar]';
            emptyOpt.disabled = true;
            drinkSelect.appendChild(emptyOpt);
        } else {
            drinks.forEach(function(drink) {
                var option = document.createElement('option');
                option.value = drink.id;
                option.textContent = drink.name + ' (' + formatCurrency(drink.price) + ')';
                option.setAttribute('data-price', drink.price);
                drinkSelect.appendChild(option);
            });
        }
    }
    renderDrinkOptions();

    // Update total price
    function updateDrinkTotal() {
        var selected = drinkSelect.options[drinkSelect.selectedIndex];
        var price = selected && selected.getAttribute('data-price') ? parseFloat(selected.getAttribute('data-price')) : 0;
        var count = parseInt(drinkCount.value, 10) || 1;
        var total = price * count;
        drinkTotalPrice.textContent = formatCurrency(total);
    }
    drinkSelect.addEventListener('change', updateDrinkTotal);
    drinkCount.addEventListener('input', updateDrinkTotal);
    updateDrinkTotal();

    // Add drink booking handler
    addDrinkBtn.addEventListener('click', async function() {
        var uid = userIdInput.value;
        var drinkId = drinkSelect.value;
        var count = parseInt(drinkCount.value, 10) || 1;
        if (!uid) {
            alert('<?= $this->t('Bitte zuerst einen Benutzer auswählen.') ?>');
            return;
        }
        if (!drinkId) {
            alert('<?= $this->t('Bitte ein Getränk auswählen.') ?>');
            return;
        }
        if (count < 1) {
            alert('<?= $this->t('Bitte eine gültige Anzahl eingeben.') ?>');
            return;
        }
        addDrinkBtn.disabled = true;
        addDrinkBtn.textContent = '...';
        try {
            const resp = await fetch('<?= $this->url('user/add-drink-booking') ?>', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                credentials: 'same-origin',
                body: new URLSearchParams({
                    uid: uid,
                    drink_id: drinkId,
                    count: count
                })
            });
            const data = await resp.json();
            if (!data.success) {
                alert('<?= $this->t('Fehler beim Buchen:') ?> ' + (data.error || 'Unbekannter Fehler'));
            } else {
                updateUserInfo();
                drinkSelect.value = '';
                drinkCount.value = 1;
                updateDrinkTotal();
            }
        } catch (e) {
            alert('<?= $this->t('Netzwerkfehler beim Buchen des Getränks.') ?>');
        } finally {
            addDrinkBtn.disabled = false;
            addDrinkBtn.textContent = '<?= $this->t('Getränk buchen') ?>';
        }
    });
    // Persist showStorno state in localStorage
    var showStorno = localStorage.getItem('deposits_show_storno') === '1';

    // Helper: find user by uid
    function findUserByUid(uid) {
        return users.find(u => u.uid === uid);
    }
    // Helper: find user by alias/email string
    function findUserByString(str) {
        str = str.trim().toLowerCase();
        return users.find(u => (u.alias + ' (' + u.email + ')').toLowerCase() === str);
    }
    // Autocomplete logic
    function renderUserList(filter) {
        userSearchList.innerHTML = '';
        if (!filter) return;
        var matches = users.filter(u =>
            u.alias.toLowerCase().includes(filter) ||
            u.email.toLowerCase().includes(filter)
        );
        if (matches.length === 0) return;
        var list = document.createElement('div');
        list.style.position = 'absolute';
        list.style.background = '#fff';
        list.style.border = '1px solid #ccc';
        list.style.width = '100%';
        list.style.maxHeight = '180px';
        list.style.overflowY = 'auto';
        matches.forEach(function(u) {
            var item = document.createElement('div');
            item.textContent = u.alias + ' (' + u.email + ')';
            item.style.padding = '4px 8px';
            item.style.cursor = 'pointer';
            item.addEventListener('mousedown', function(e) {
                e.preventDefault();
                userSearch.value = u.alias + ' (' + u.email + ')';
                userIdInput.value = u.uid;
                userSearchList.innerHTML = '';
                updateDrinksFields();
                updateUserInfo();
            });
            list.appendChild(item);
        });
        userSearchList.appendChild(list);
    }
    userSearch.addEventListener('input', function() {
        var val = userSearch.value.trim().toLowerCase();
        renderUserList(val);
        // If input matches exactly, set userIdInput
        var user = findUserByString(userSearch.value);
        if (user) {
            userIdInput.value = user.uid;
            updateDrinksFields();
            updateUserInfo();
        } else {
            userIdInput.value = '';
        }
    });
    userSearch.addEventListener('blur', function() {
        setTimeout(function() { userSearchList.innerHTML = ''; }, 150);
    });
    // Restore last selected user from localStorage
    var lastUid = localStorage.getItem('deposits_selected_uid');
    if (lastUid) {
        var user = findUserByUid(lastUid);
        if (user) {
            userSearch.value = user.alias + ' (' + user.email + ')';
            userIdInput.value = user.uid;
            updateDrinksFields();
            updateUserInfo();
        }
    }
    function updateDrinksFields(drinksEnabledFromApi, drinksAliasFromApi) {
        var uid = userIdInput.value;
        var user = findUserByUid(uid);
        var drinksEnabled = typeof drinksEnabledFromApi === 'boolean'
            ? drinksEnabledFromApi
            : (user ? user.drinks_enabled === 1 : false);
        var alias = typeof drinksAliasFromApi === 'string'
            ? drinksAliasFromApi
            : (user ? user.drinks_alias : '');
        drinksEnabledCheckbox.checked = drinksEnabled;
        drinksEnabledCheckbox.disabled = !user;
        if (typeof drinksAliasFromApi === 'string') {
            aliasInput.value = drinksAliasFromApi;
        } else if (user) {
            aliasInput.value = user.drinks_alias || '';
        } else {
            aliasInput.value = '';
        }
        if (drinksEnabled) {
            aliasRow.style.display = '';
        } else {
            aliasRow.style.display = 'none';
        }
    }
    drinksEnabledCheckbox.addEventListener('change', async function() {
        var uid = userIdInput.value;
        var user = findUserByUid(uid);
        var drinksEnabled = drinksEnabledCheckbox.checked;
        if (user) {
            user.drinks_enabled = drinksEnabled ? 1 : 0;
        }
        if (drinksEnabled) {
            aliasRow.style.display = '';
        } else {
            aliasRow.style.display = 'none';
        }
        if (uid) {
            try {
                const resp = await fetch('<?= $this->url('user/set-user-drinks-settings') ?>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    credentials: 'same-origin',
                    body: new URLSearchParams({
                        uid: uid,
                        drinks_enabled: drinksEnabled ? '1' : '0'
                    })
                });
                const data = await resp.json();
                if (!data.success) {
                    alert('Fehler beim Speichern: ' + (data.error || 'Unbekannter Fehler'));
                }
            } catch (e) {
                alert('Netzwerkfehler beim Speichern der Drinks-Einstellung.');
            }
        }
    });
    var setAliasBtn = document.getElementById('set-alias-btn');
    setAliasBtn.addEventListener('click', async function() {
        var uid = userIdInput.value;
        var user = findUserByUid(uid);
        var drinksEnabled = drinksEnabledCheckbox.checked;
        var alias = aliasInput.value;
        if (!drinksEnabled) {
            alert('Alias kann nur geändert werden, wenn Drinks aktiviert ist.');
            return;
        }
        if (user) {
            user.drinks_alias = alias;
        }
        if (uid) {
            try {
                setAliasBtn.disabled = true;
                setAliasBtn.textContent = '...';
                const resp = await fetch('<?= $this->url('user/set-user-drinks-settings') ?>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    credentials: 'same-origin',
                    body: new URLSearchParams({
                        uid: uid,
                        drinks_alias: alias
                    })
                });
                const data = await resp.json();
                if (!data.success) {
                    alert('Fehler beim Speichern: ' + (data.error || 'Unbekannter Fehler'));
                }
            } catch (e) {
                alert('Netzwerkfehler beim Speichern der Theken-ID.');
            } finally {
                setAliasBtn.disabled = false;
                setAliasBtn.textContent = 'Theken-ID speichern';
            }
        }
    });
    async function updateUserInfo() {
        var uid = userIdInput.value;
        localStorage.setItem('deposits_selected_uid', uid);
        balanceBox.style.display = 'none';
        balanceBox.textContent = '';
        historySection.innerHTML = '';
        if (uid) {
            try {
                const resp = await fetch('<?= $this->url('user/get-user-deposits-data') ?>?uid=' + encodeURIComponent(uid), { credentials: 'same-origin' });
                if (!resp.ok) throw new Error('HTTP ' + resp.status);
                const data = await resp.json();
                if (typeof data.drinks_enabled !== 'undefined' || typeof data.drinks_alias !== 'undefined') {
                    updateDrinksFields(data.drinks_enabled, data.drinks_alias);
                    var user = findUserByUid(uid);
                    if (user) {
                        if (typeof data.drinks_enabled !== 'undefined') user.drinks_enabled = data.drinks_enabled ? 1 : 0;
                        if (typeof data.drinks_alias !== 'undefined') user.drinks_alias = data.drinks_alias || '';
                    }
                } else {
                    updateDrinksFields();
                }
                if (typeof data.balance !== 'undefined' && data.balance !== null) {
                    balanceBox.style.display = '';
                    balanceBox.textContent = '<?= $this->t('Aktueller Kontostand:') ?> ' + formatCurrency(data.balance);
                }
                function renderHistory(history, showStorno) {
                    var html = '<h2><?= $this->t('Buchungs- und Einzahlungsverlauf') ?></h2>' +
                        '<div style="margin-bottom:10px;"><label><input type="checkbox" id="show-storno-checkbox"' + (showStorno ? ' checked' : '') + '> <?= $this->t('Zeige Storno') ?></label></div>';
        // Calculate running balance in chronological order and attach to each entry
        var allEntries = [];
        for (var day of history) {
            for (var entry of day.entries) {
                allEntries.push(entry);
            }
        }
        // Sort all entries by date+time ascending (oldest first)
        allEntries.sort(function(a, b) {
            var ad = (a.datetime || a.date || '');
            var bd = (b.datetime || b.date || '');
            return ad.localeCompare(bd);
        });
        var runningBalance = 0;
        for (var i = 0; i < allEntries.length; i++) {
            var entry = allEntries[i];
            var amount = parseFloat(entry.amount);
            if (isNaN(amount)) amount = 0;
            if (entry.type === 'Einzahlung' && !entry.deleted) {
                runningBalance += amount;
            } else if (entry.type !== 'Einzahlung' && (!entry.deleted || showStorno)) {
                runningBalance += amount;
            }
            entry.displayBalance = runningBalance;
        }
        // Reverse days for display
        var reversedDays = history.slice().reverse();
        for (var day of reversedDays) {
            var deposits = day.entries.filter(e => e.type === 'Einzahlung' && !e.deleted);
            var orders = day.entries.filter(e => e.type !== 'Einzahlung' && (showStorno || !e.deleted));
            if (orders.length === 0 && deposits.length === 0) continue;
            var daySum = day.entries.filter(e => e.type !== 'Einzahlung' && (showStorno || !e.deleted)).reduce((sum, e) => (e.deleted ? sum : sum + e.amount), 0);
            html += '<div style="margin-top:18px; margin-bottom:8px; font-weight:bold; color:#1769aa;">' + day.date + '</div>';
            html += '<div style="margin-left:32px;">';
            // Show deposits (reverse for most recent first)
            for (var i = deposits.length - 1; i >= 0; i--) {
                var entry = deposits[i];
                var timeStr = '';
                if (entry.datetime) {
                    var match = entry.datetime.match(/\b(\d{2}:\d{2})/);
                    if (match) timeStr = match[1];
                }
                html += '<div style="margin-bottom:1px; color:#388e3c; font-weight:bold; line-height:1.1;">'
                    + '<?= $this->t('Einzahlung:') ?> ' + formatCurrency(entry.amount)
                    + (entry.desc ? ' <span style="color:#888;font-weight:normal;">' + entry.desc + '</span>' : '')
                    + (entry.createdby ? ' <span style="color:#888;font-weight:normal;">(' + entry.createdby + ')</span>' : '')
                    + (timeStr ? ' <span style="color:#888;font-size:90%;margin-left:8px;">' + timeStr + '</span>' : '')
                    + (typeof entry.displayBalance !== 'undefined' ? ' <span style="color:#2196f3;">Kontostand: ' + formatCurrency(entry.displayBalance) + '</span>' : '')
                    + '</div>';
            }
            if (orders.length > 0) {
                html += '<table class="default-table" style="margin-bottom:4px; text-align:left; margin-left:0; padding-left:16px;">';
                // Show orders (reverse for most recent first)
                for (var i = day.entries.length - 1; i >= 0; i--) {
                    var entry = day.entries[i];
                    if (entry.type === 'Einzahlung') continue;
                    if (entry.deleted && !showStorno) continue;
                    var isDeleted = entry.deleted;
                    var color = entry.type === 'Buchung' ? '#1769aa' : '#b71c1c';
                    var style = 'color:' + color + ';';
                    if (isDeleted) style += ' text-decoration:line-through;color:#b0b0b0;';
                    style += ' padding-top:1px; padding-bottom:1px; line-height:1; text-align:left;';
                    var timeStr = '';
                    if (entry.datetime) {
                        var match = entry.datetime.match(/\b(\d{2}:\d{2})/);
                        if (match) timeStr = match[1];
                    }
                    html += '<tr style="' + style + '">';
                    html += '<td style="text-align:left;padding-top:1px;padding-bottom:1px;line-height:1;">' + entry.type + '</td>';
                    html += '<td style="text-align:left;padding-top:1px;padding-bottom:1px;line-height:1;">' + formatCurrency(entry.amount) + '</td>';
                    html += '<td style="text-align:left;padding-top:1px;padding-bottom:1px;line-height:1;">' + (entry.desc || '') + (timeStr ? ' <span style="color:#888;font-size:90%;margin-left:8px;">' + timeStr + '</span>' : '') + '</td>';
                    html += '</tr>';
                }
                // Find last non-deleted order for correct balance
                var lastBalance = null;
                for (var i = day.entries.length - 1; i >= 0; i--) {
                    var entry = day.entries[i];
                    if (entry.type !== 'Einzahlung' && (!entry.deleted || showStorno)) {
                        lastBalance = entry.displayBalance;
                        break;
                    }
                }
                html += '<tr style="font-weight:bold;background:#fafdff;">' +
                    '<td style="text-align:left;">Tagessumme</td>' +
                    '<td style="text-align:left;">' + formatCurrency(daySum) + '</td>' +
                    '<td style="text-align:left;">';
                if (lastBalance !== null) {
                    html += '<span style="color:#2196f3;">Kontostand: ' + formatCurrency(lastBalance) + '</span>';
                }
                html += '</td></tr>';
                html += '</table>';
            }
            html += '</div>';
        }
        return html;
                }
                if (Array.isArray(data.history)) {
                    var history = data.history;
                    function attachStornoHandler() {
                        var stornoCheckbox = document.getElementById('show-storno-checkbox');
                        if (stornoCheckbox) {
                            stornoCheckbox.addEventListener('change', function() {
                                showStorno = stornoCheckbox.checked;
                                localStorage.setItem('deposits_show_storno', showStorno ? '1' : '0');
                                historySection.innerHTML = renderHistory(history, showStorno);
                                attachStornoHandler();
                            });
                        }
                    }
                    historySection.innerHTML = renderHistory(history, showStorno);
                    attachStornoHandler();
                }
            } catch (e) {
                historySection.innerHTML = '<div style="color:red;">Fehler beim Laden der Daten.</div>';
            }
        }
    }
    // Only update if a user is preselected
    if (userIdInput.value) updateUserInfo();
});
// ...existing code...
</script>
