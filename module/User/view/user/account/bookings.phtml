<?php

// Calculate current balance from bottom up (oldest to newest)
$currentBalance = 0;
if (isset($this->drinkHistory) && is_array($this->drinkHistory)) {
    foreach ($this->drinkHistory as $entry) {
        if ($entry['type'] === 'deposit') {
            $currentBalance += $entry['amount'];
        } else if ($entry['type'] === 'order') {
            $currentBalance -= $entry['total'];
        }
    }
}

$this->setup(array(
    'title' => 'My bookings',
    'panel' => 'centered-panel',
    'back' => true,
    'links' => array(
        'My account' => $this->url('user/settings'),
    ),
));

?>

<style type="text/css">
#current-balance-display.negative-balance {
    background: #fff3f3 !important;
    color: #d32f2f !important;
    border: 1px solid #d32f2f;
}
#current-balance-display.negative-balance #current-balance-value {
    color: #d32f2f !important;
}
.drink-tile {
    width: 155px;
    height: 210px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    background: #fff;
    padding: 4px;
    position: relative;
    overflow: visible;
    border: 1px solid #ccc;
    border-radius: 8px;
}
.drink-info {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    width: 100%;
}
.drink-info .drink-name {
    font-weight: bold;
    margin-bottom: 4px;
    text-align: center;
}
.drink-info .drink-price {
    color: #666;
    text-align: center;
    margin-bottom: 4px;
    font-size: 1.1em;
    font-weight: bold;
}
.drink-tile .drink-controls {
    position: absolute;
    top: 4px;
    left: 4px;
    right: 4px;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    z-index: 2;
    pointer-events: none;
    width: auto;
}
.drink-tile .drink-controls button {
    pointer-events: auto;
}
.drink-tile .drink-count-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 2px;
}
.drink-image-frame {
    width: 142px;
    height: 142px;
    display: flex;
    align-items: flex-end;
    justify-content: center;
    margin: 0 auto;
    padding: 0;
}
.drink-tile img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    margin: 0;
    background: transparent;
    border-radius: 4px;
    margin-top: 0;
    z-index: 1;
}
/* Responsive top bar for drink ordering */
@media (max-width: 900px) {
    .drink-order-top-bar {
        flex-wrap: wrap;
        gap: 0 !important;
    }
    .drink-order-top-bar > * {
        flex: 1 1 100%;
        justify-content: center !important;
        margin-bottom: 4px !important;
        margin-top: 0 !important;
    }
    .drink-order-top-bar h2 {
        text-align: center;
        margin-bottom: 0;
        margin-top: 0;
    }
    .drink-order-top-bar .order-actions {
        flex: 0 0 100%;
        display: flex;
        flex-direction: row;
        justify-content: center !important;
        align-items: center;
        gap: 0 8px;
        margin-bottom: 4px !important;
    }
    .drink-order-top-bar button,
    .drink-order-top-bar #clear-drink-selection {
        margin: 0 !important;
    }
}
.drink-tiles-wrapper {
    justify-content: center;
    align-items: flex-start;
    display: flex;
    flex-wrap: wrap;
    gap: 24px;
}
@media (max-width: 700px) {
    .drink-tiles-wrapper {
        gap: 24px;
        justify-content: center;
    }
    .drink-tile {
        width: calc(50% - 12px) !important;
        flex: 0 0 calc(50% - 12px) !important;
        height: auto;
        margin: 0 !important;
        box-sizing: border-box;
    }
}
@media (max-width: 500px) {
    .drink-tiles-wrapper {
        gap: 8px;
        justify-content: center !important;
    }
    .drink-tile {
        width: calc(50% - 4px) !important;
        flex: 0 0 calc(50% - 4px) !important;
        margin: 0 !important;
        box-sizing: border-box;
    }
}
.default-table th {
    padding: 8px 16px 8px 0;
    height: 32px;
    font-weight: bold;
    font-size: 1em;
}
.default-table td {
    padding-right: 16px;
    padding-bottom: 4px;
    height: 20px;
}
</style>

<?php if (isset($this->drinks)): ?>
    <div class="separator-small"></div>
    <div class="drink-order-top-bar" style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 0 8px;">
        <h2 style="margin: 0; flex: 0 0 auto;"><?= $this->t('STC SB-Theke') ?></h2>
        <div style="flex: 1 1 auto; display: flex; justify-content: center; align-items: center;">
            <div id="current-balance-display" class="<?= $currentBalance < 0 ? 'negative-balance' : '' ?>" style="font-size: 1.1em; font-weight: bold; color: #2196f3; background: #f5faff; border-radius: 6px; padding: 8px 18px; display: inline-flex; align-items: center; border: 1px solid #2196f3;">
                <?= $this->t('New Balance') ?>
                <span id="current-balance-value" style="margin-left: 8px; color: <?= $currentBalance < 0 ? '#d32f2f' : '#2196f3' ?>; font-size: 1.15em; font-weight: bold;">
                    <?= $this->priceFormat($currentBalance * 100.0, null, null, null, null, null, true, true, false) ?>
                </span>
            </div>
        </div>
        <div class="order-actions" style="display: flex; align-items: center; gap: 0 8px; flex: 0 0 auto;">
            <button type="button" id="clear-drink-selection" title="<?= $this->escapeHtmlAttr($this->t('Clear selection')) ?>" style="background: none; border: none; margin-right: 0; cursor: pointer; padding: 0; display: flex; align-items: center;">
                <svg width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="#888" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display:block;"><rect x="3" y="6" width="18" height="14" rx="2" fill="#f5faff" stroke="#888"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/><line x1="1" y1="6" x2="23" y2="6"/><line x1="10" y1="11" x2="10" y2="17"/><line x1="14" y1="11" x2="14" y2="17"/></svg>
            </button>
            <button type="submit" form="drink-order-form" name="drink_order_submit" value="1" class="default-button" style="font-size: 1.2em; padding: 12px 32px; min-width: 120px; font-weight: bold; display: flex; align-items: center; gap: 12px; flex: 0 0 auto;">
                <span style="font-weight: bold;"><?= $this->t('Order') ?></span>
                <span id="drink-order-total" style="font-weight: bold; color: #2196f3; font-size: 1em;"> <?= $this->priceFormat(0) ?> </span>
            </button>
        </div>
    </div>
    <style>
    @media (max-width: 900px) {
        .order-top-bar {
            flex-direction: column;
            align-items: stretch !important;
            gap: 10px 0 !important;
        }
        .order-top-bar > * {
            width: 100% !important;
            min-width: 0 !important;
            justify-content: center !important;
            margin-right: 0 !important;
        }
        .order-top-bar h2 {
            text-align: center;
        }
        #current-balance-display {
            justify-content: center;
        }
        .order-top-bar button.default-button {
            justify-content: center;
        }
    }
    </style>
    <form method="post" id="drink-order-form">
        <div style="height: 16px;"></div>
        <div class="drink-tiles-wrapper">
            <?php foreach ($this->drinks as $drink): ?>
                <div class="drink-tile">
                    <?php
                    $imgPath = isset($drink['image']) && $drink['image'] ? $this->basePath('imgs/branding/' . $drink['image']) : $this->basePath('imgs/branding/drink-placeholder.png');
                    ?>
                    <div class="drink-controls">
                        <button type="button" class="drink-minus" data-drink-id="<?= (int)$drink['id'] ?>" style="background: #eee; border: none; border-radius: 4px; width: 28px; height: 28px; font-size: 18px; font-weight: bold; color: #2196f3; cursor: pointer; margin-right: 0;">â€“</button>
                        <span style="flex: 1 1 auto; display: flex; align-items: center; justify-content: center; min-width: 32px;">
                            <span class="drink-count-badge" id="badge-<?= (int)$drink['id'] ?>" style="background: #2196f3; color: #fff; border-radius: 50%; padding: 3px 8px; font-size: 13px; font-weight: bold; min-width: 22px; text-align: center; visibility: hidden;">0</span>
                        </span>
                        <button type="button" class="drink-plus" data-drink-id="<?= (int)$drink['id'] ?>" style="background: #eee; border: none; border-radius: 4px; width: 28px; height: 28px; font-size: 18px; font-weight: bold; color: #2196f3; cursor: pointer; margin-left: 0;">+</button>
                    </div>
                    <div class="drink-image-frame">
                        <img src="<?= $imgPath ?>" alt="<?= $this->escapeHtmlAttr($drink['name']) ?>" />
                    </div>
                    <div class="drink-info">
                        <div class="drink-name">
                            <?= $this->escapeHtml($drink['name']) ?>
                        </div>
                        <div class="drink-price">
                            <?= $this->priceFormat($drink['price'] * 100.0, null, null, null, null, null, true, false, false) ?>
                        </div>
                    </div>
                    <input type="hidden" name="drink_counts[<?= (int)$drink['id'] ?>]" id="input-<?= (int)$drink['id'] ?>" value="0" data-price="<?= htmlspecialchars($drink['price'], ENT_QUOTES) ?>" />
                </div>
            <?php endforeach; ?>
        </div>
        <div style="height: 24px;"></div>
    </form>
    <script>
    // Drink order tile logic
    function updateDrinkOrderTotal() {
        var total = 0;
        document.querySelectorAll('input[id^="input-"]').forEach(function(input) {
            var count = parseInt(input.value) || 0;
            var price = parseFloat(input.getAttribute('data-price')) || 0;
            total += count * price;
        });
        // Format as currency (EUR, 2 decimals, comma as decimal separator)
        var formatted = (total).toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
        document.getElementById('drink-order-total').textContent = formatted;

        // Update current balance preview
        var initialBalance = parseFloat("<?= $currentBalance ?>");
        var newBalance = initialBalance - total;
        var formattedBalance = newBalance.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
        var balanceElem = document.getElementById('current-balance-value');
        var balanceBox = document.getElementById('current-balance-display');
        balanceElem.textContent = formattedBalance;
        balanceElem.style.color = (newBalance < 0) ? '#d32f2f' : '#2196f3';
        if (newBalance < 0) {
            balanceBox.classList.add('negative-balance');
        } else {
            balanceBox.classList.remove('negative-balance');
        }
    }
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.drink-plus').forEach(function(btn) {
            btn.addEventListener('click', function() {
                var id = this.getAttribute('data-drink-id');
                var input = document.getElementById('input-' + id);
                var badge = document.getElementById('badge-' + id);
                var val = parseInt(input.value) || 0;
                val++;
                input.value = val;
                badge.textContent = val;
                badge.style.visibility = val > 0 ? 'visible' : 'hidden';
                updateDrinkOrderTotal();
            });
        });
        document.querySelectorAll('.drink-minus').forEach(function(btn) {
            btn.addEventListener('click', function() {
                var id = this.getAttribute('data-drink-id');
                var input = document.getElementById('input-' + id);
                var badge = document.getElementById('badge-' + id);
                var val = parseInt(input.value) || 0;
                if (val > 0) val--;
                input.value = val;
                badge.textContent = val;
                badge.style.visibility = val > 0 ? 'visible' : 'hidden';
                updateDrinkOrderTotal();
            });
        });
        document.getElementById('clear-drink-selection').addEventListener('click', function() {
            document.querySelectorAll('input[id^="input-"]').forEach(function(input) {
                input.value = 0;
                var id = input.id.replace('input-', '');
                var badge = document.getElementById('badge-' + id);
                badge.textContent = 0;
                badge.style.visibility = 'hidden';
            });
            updateDrinkOrderTotal();
        });
        // Initialize all badges to 0 and hidden
        document.querySelectorAll('input[id^="input-"]').forEach(function(input) {
            var id = input.id.replace('input-', '');
            var badge = document.getElementById('badge-' + id);
            badge.textContent = input.value;
            badge.style.visibility = (parseInt(input.value) > 0) ? 'visible' : 'hidden';
        });
        updateDrinkOrderTotal();
    });
    </script>
<?php endif; ?>

<?php if (isset($this->drinkHistory)): ?>
    <h2><?= $this->t('My Drink Orders and Payments') ?></h2>
    <div style="margin-bottom: 18px;"></div>
    <table class="default-table middle-table">
        <tr style="background: #e3f0fa;">
            <th style="text-align:left; width:24px;"></th>
            <th style="text-align:left;">
                <?= $this->t('Drink / Payment') ?>
            </th>
            <th style="text-align:left;">
                <?= $this->t('#') ?>
            </th>
            <th style="text-align:left;">
                <?= $this->t('Price') ?>
            </th>
            <th style="text-align:left;">
                <?= $this->t('Total') ?>
            </th>
            <th style="text-align:left;">
                <?= $this->t('Balance') ?>
            </th>
        </tr>
        <?php
        $drinkHistory = array_reverse($this->drinkHistory);
        $balance = 0;
        $rows = [];
        // Calculate balance from bottom up
        for ($i = count($drinkHistory) - 1; $i >= 0; $i--) {
            $entry = $drinkHistory[$i];
            if ($entry['type'] === 'deposit') {
                $balance += $entry['amount'];
            } else if ($entry['type'] === 'order') {
                $balance -= $entry['total'];
            }
            $rows[$i] = $balance;
        }
        $rows = array_reverse($rows);
        // Prepare a flat list of top-level entries: day groups and deposits, sorted newest to oldest
        $entriesByDay = [];
        $deposits = [];
        foreach ($drinkHistory as $entry) {
            if ($entry['type'] === 'deposit') {
                $deposits[] = $entry;
            } else if ($entry['type'] === 'order') {
                $date = date('Y-m-d', strtotime($entry['datetime']));
                if (!isset($entriesByDay[$date])) {
                    $entriesByDay[$date] = [];
                }
                $entriesByDay[$date][] = $entry;
            }
        }
        // Build a flat list of top-level items (date group or deposit), sorted oldest to newest for math
        $topLevel = [];
        foreach ($entriesByDay as $date => $orders) {
            $topLevel[] = [ 'type' => 'day', 'date' => $date, 'orders' => $orders ];
        }
        foreach ($deposits as $deposit) {
            $topLevel[] = [ 'type' => 'deposit', 'datetime' => $deposit['datetime'], 'entry' => $deposit ];
        }
        // Sort by date/datetime ascending (oldest to newest)
        usort($topLevel, function($a, $b) {
            $aTime = ($a['type'] === 'day') ? strtotime($a['date'] . ' 23:59:59') : strtotime($a['entry']['datetime']);
            $bTime = ($b['type'] === 'day') ? strtotime($b['date'] . ' 23:59:59') : strtotime($b['entry']['datetime']);
            return $aTime <=> $bTime;
        });
        // Calculate balances for each top-level group
        $balance = 0;
        $groupBalances = [];
        foreach ($topLevel as $idx => $item) {
            if ($item['type'] === 'day') {
                $dayTotalAmount = 0;
                foreach ($item['orders'] as $entry) {
                    $dayTotalAmount += $entry['total'];
                }
                $balance -= $dayTotalAmount;
                $groupBalances[$idx] = $balance;
            } else if ($item['type'] === 'deposit') {
                $amount = $item['entry']['amount'];
                $balance += $amount;
                $groupBalances[$idx] = $balance;
            }
        }
        // Now render from newest to oldest
        $renderOrder = array_reverse(array_keys($topLevel));
        $groupIndex = 0;
        foreach ($renderOrder as $i) {
            $item = $topLevel[$i];
            $balanceAfter = $groupBalances[$i];
            if ($item['type'] === 'day') {
                $date = $item['date'];
                $orders = $item['orders'];
                $collapsedId = 'order-day-' . $groupIndex;
                $isOpen = ($groupIndex === 0);
                $dayDrinkSum = 0;
                $dayTotalAmount = 0;
                foreach ($orders as $entry) {
                    $dayDrinkSum += (int)$entry['quantity'];
                    $dayTotalAmount += $entry['total'];
                }
                echo '<tr class="order-day-header" style="background:#f5faff; cursor:pointer;" data-group="' . $collapsedId . '">';
                echo '<td style="width:24px; text-align:center;">';
                echo '<span class="collapse-toggle" data-group="' . $collapsedId . '" style="display:inline-block; width:20px; height:20px; line-height:20px; border-radius:50%; background:#2196f3; color:#fff; font-weight:bold; cursor:pointer;">' . ($isOpen ? 'â€“' : '+') . '</span>';
                echo '</td>';
                echo '<td style="font-weight:bold;">' . $this->escapeHtml($date) . '</td>';
                echo '<td style="font-weight:bold;">' . $dayDrinkSum . '</td>';
                echo '<td style="font-weight:bold;"></td>';
                echo '<td style="font-weight:bold;">' . $this->priceFormat(-$dayTotalAmount * 100.0, null, null, null, null, null, true, false, false) . '</td>';
                echo '<td style="font-weight:bold;">' . $this->priceFormat($balanceAfter * 100.0, null, null, null, null, null, true, true, false) . '</td>';
                echo '</tr>';
                // Sort orders inside the group newest to oldest
                $ordersSorted = $orders;
                usort($ordersSorted, function($a, $b) {
                    return strtotime($b['datetime']) <=> strtotime($a['datetime']);
                });
                foreach ($ordersSorted as $entry) {
                    $time = date('H:i', strtotime($entry['datetime']));
                    $rowStyle = $isOpen ? '' : 'display:none;';
                    echo '<tr class="order-day-row" data-group="' . $collapsedId . '" style="background:#fafdff;' . $rowStyle . '">';
                    echo '<td style="color:#888; font-size:0.95em; text-align:center;">' . $time . '</td>';
                    echo '<td>' . $this->escapeHtml($entry['name']) . '</td>';
                    echo '<td>' . (int)$entry['quantity'] . '</td>';
                    echo '<td>' . $this->priceFormat($entry['price'] * 100.0, null, null, null, null, null, true, false, false) . '</td>';
                    echo '<td>' . $this->priceFormat($entry['total'] * 100.0, null, null, null, null, null, true, false, false) . '</td>';
                    echo '</tr>';
                }
                $groupIndex++;
            } else if ($item['type'] === 'deposit') {
                $entry = $item['entry'];
                $date = date('Y-m-d', strtotime($entry['datetime']));
                $amount = $entry['amount'];
                echo '<tr style="background:#fafdff; font-weight:bold;">';
                echo '<td></td>';
                echo '<td>' . $this->escapeHtml($date) . ' ' . $this->t('Balance') . '</td>';
                echo '<td></td>';
                echo '<td></td>';
                echo '<td>' . $this->priceFormat($amount * 100.0, null, null, null, null, null, true, true, false) . '</td>';
                echo '<td>' . $this->priceFormat($balanceAfter * 100.0, null, null, null, null, null, true, true, false) . '</td>';
                echo '</tr>';
            }
        }
        ?>
    </table>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.order-day-header').forEach(function(header) {
            header.addEventListener('click', function(e) {
                if (!e.target.classList.contains('collapse-toggle')) {
                    var group = this.getAttribute('data-group');
                    var rows = document.querySelectorAll('.order-day-row[data-group="' + group + '"]');
                    var toggle = this.querySelector('.collapse-toggle');
                    var isOpen = rows.length > 0 && rows[0].style.display !== 'none';
                    rows.forEach(function(row) {
                        row.style.display = isOpen ? 'none' : '';
                    });
                    if (toggle) toggle.textContent = isOpen ? '+' : 'â€“';
                }
            });
        });
        document.querySelectorAll('.collapse-toggle').forEach(function(toggle) {
            toggle.addEventListener('click', function(e) {
                e.stopPropagation();
                var group = this.getAttribute('data-group');
                var rows = document.querySelectorAll('.order-day-row[data-group="' + group + '"]');
                var isOpen = rows.length > 0 && rows[0].style.display !== 'none';
                rows.forEach(function(row) {
                    row.style.display = isOpen ? 'none' : '';
                });
                this.textContent = isOpen ? '+' : 'â€“';
            });
        });
    });
    </script>
    <div class="separator-small"></div>
<?php endif; ?>

<div>
    <h1><?= $this->t('My bookings') ?></h1>

    <div class="separator-small"></div>

    <?php if (count($this->bookings) == 0): ?>
        <p><?= sprintf($this->t('You have not booked any %s yet.'), $this->option('subject.square.type.plural')) ?></p>
    <?php elseif (count($this->bookings) == 1): ?>
        <p><?= sprintf($this->t('You have already booked one %s.'), $this->option('subject.square.type')) ?></p>
    <?php else: ?>
        <p><?= sprintf($this->t('You have already booked %s %s.'), count($this->bookings), $this->option('subject.square.type.plural')) ?></p>
    <?php endif; ?>

    <?php if (count($this->bookings) > 0): ?>

        <div class="separator separator-line"></div>

        <style type="text/css">
            .default-table td { padding-right: 16px; padding-bottom: 8px; height: 24px; }
        </style>

        <table class="default-table middle-table">
            <?php

            $todayMentioned = false;

            foreach ($this->bookings as $bid => $booking) {
                $reservations = $booking->needExtra('reservations');

                $bookingDateTimeStart = null;
                $bookingDateTimeEnd = null;

                foreach ($reservations as $reservation) {
                    $tmpDateTimeStart = new DateTime($reservation->need('date') . ' ' . $reservation->need('time_start'));
                    $tmpDateTimeEnd = new DateTime($reservation->need('date') . ' ' . $reservation->need('time_end'));

                    if (is_null($bookingDateTimeStart) || $tmpDateTimeStart < $bookingDateTimeStart) {
                        $bookingDateTimeStart = $tmpDateTimeStart;
                    }

                    if (is_null($bookingDateTimeEnd) || $tmpDateTimeEnd < $bookingDateTimeStart) {
                        $bookingDateTimeEnd = $tmpDateTimeEnd;
                    }
                }

                $cancellable = false;
                $classes = array();

                $square = $this->squareManager->get($booking->need('sid'));

                if ($this->now > $bookingDateTimeStart) {
                    $classes['color'] = 'gray';

                    if (! $todayMentioned) {
                        echo '<tr><td colspan="4"><div class="gray" style="position: relative;">';

                        echo '<div style="position: absolute; left: 50%; top: -16px; margin-left: -23px; padding: 8px; background: #FFF;">' . $this->t('Now') . '</div>';
                        echo '<div class="separator-small separator-line"></div>';

                        echo '</div></td></tr>';

                        $todayMentioned = true;
                    }
                } else {
                    $cancellable = $this->squareValidator->isCancellable($booking);
                }

                $bills = $booking->getExtra('bills');

                if ($bills) {
                    $price = 0;

                    foreach ($bills as $bill) {
                        $price += $bill->need('price');
                    }

                    $pricing = '';
                    $pricing .= '<a href="' . $this->url('user/bookings/bills', ['bid' => $bid]) . '" class="default-button mini-button" style="min-width: 80px;">';
                    $pricing .= $this->priceFormat($price);
                    $pricing .= '</a>';
                } else {
                    $pricing = '<div class="centered-text gray">&middot;</div>';
                }

                echo '<tr>';

                $class = implode(' ', $classes);

                echo '<td class="' . $class . (! isset($classes['color']) ? 'my-highlight' : '') . '">' . $this->option('subject.square.type') . ' ' . $this->t($square->need('name')) . '</td>';
                echo '<td class="' . $class . '">' . $this->dateRange($bookingDateTimeStart, $bookingDateTimeEnd) . '</td>';
                echo '<td class="' . $class . '" style="padding-left: 16px;">' . $pricing . '</td>';

                if ($cancellable) {
                    echo sprintf('<td style="padding-left: 16px;"><a href="%s" class="default-button mini-button">%s</a></td>',
                        $this->url('square/booking/cancellation', [], ['query' => ['bid' => $booking->need('bid')]]), $this->t('Cancel booking'));
                } else {
                    echo '<td class="centered-text gray" style="padding-left: 16px;">&middot;</td>';
                }

                echo '</tr>';
            }

            ?>
        </table>

        <div class="separator-small"></div>

    <?php endif; ?>

    <?php if (isset($this->orderMessage) && $this->orderMessage): ?>
        <div class="info-message"> <?= $this->escapeHtml($this->orderMessage) ?> </div>
    <?php endif; ?>
</div>
