<?php

// Always use a local variable for drinks to allow sorting/modification
$drinks = isset($this->drinks) ? $this->drinks : [];

// Display user name at the top if available
if (isset($this->userName) && $this->userName) {
    echo '<div style="font-size:1.3em; color:#2196f3; font-weight:bold; margin-bottom:12px; text-align:center; position:relative;">' .
        $this->escapeHtml($this->userName) .
        '<span id="logout-timer" style="position:absolute; right:0; top:0; font-size:0.85em; color:#d32f2f; background:#fff3f3; border:1px solid #d32f2f; border-radius:6px; padding:2px 10px; margin-left:12px; display:none;"></span>' .
        '</div>';
}

// Calculate current balance from bottom up (oldest to newest)
$currentBalance = 0;
if (isset($this->drinkHistory) && is_array($this->drinkHistory)) {
    foreach ($this->drinkHistory as $entry) {
        if ($entry['type'] === 'deposit') {
            $currentBalance += $entry['amount'];
        } else if ($entry['type'] === 'order') {
            if (!empty($entry['deleted'])) continue; // skip deleted orders for balance
            $currentBalance -= $entry['total'];
        }
    }
}

$this->setup(array(
    'title' => 'My bookings',
    'panel' => 'centered-panel',
    'back' => true,
    'links' => array(
        'My account' => $this->url('user/settings'),
    ),
));

?>

<style type="text/css">
#current-balance-display.negative-balance {
    background: #fff3f3 !important;
    color: #d32f2f !important;
    border: 1px solid #d32f2f;
}
#current-balance-display.negative-balance #current-balance-value {
    color: #d32f2f !important;
}
.drink-tile {
    width: 155px;
    height: 210px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    background: #fff;
    padding: 4px;
    position: relative;
    overflow: visible;
    border: 1px solid #ccc;
    border-radius: 8px;
}
.drink-info {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    width: 100%;
}
.drink-info .drink-name {
    font-weight: bold;
    margin-bottom: 4px;
    text-align: center;
}
.drink-info .drink-price {
    color: #666;
    text-align: center;
    margin-bottom: 4px;
    font-size: 1.1em;
    font-weight: bold;
}
.drink-tile .drink-controls {
    position: absolute;
    top: 4px;
    left: 4px;
    right: 4px;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    z-index: 2;
    pointer-events: none;
    width: auto;
}
.drink-tile .drink-controls button {
    pointer-events: auto;
}
.drink-tile .drink-count-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 2px;
    background: #2196f3;
    color: #fff;
    border-radius: 10px;
    padding: 5px 16px;
    font-size: 16px;
    font-weight: bold;
    min-width: 32px;
    min-height: 28px;
    text-align: center;
    box-shadow: 0 1px 2px rgba(0,0,0,0.04);
    transition: background 0.2s, color 0.2s;
    opacity: 0.9;
}
.drink-image-frame {
    width: 142px;
    height: 142px;
    display: flex;
    align-items: flex-end;
    justify-content: center;
    margin: 0 auto;
    padding: 0;
}
.drink-tile img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    margin: 0;
    background: transparent;
    border-radius: 4px;
    margin-top: 0;
    z-index: 1;
}
/* Responsive top bar for drink ordering */
@media (max-width: 900px) {
    .drink-order-top-bar {
        flex-wrap: wrap;
        gap: 0 !important;
    }
    .drink-order-top-bar > * {
        flex: 1 1 100%;
        justify-content: center !important;
        margin-bottom: 4px !important;
        margin-top: 0 !important;
    }
    .drink-order-top-bar h2 {
        text-align: center;
        margin-bottom: 0;
        margin-top: 0;
    }
    .drink-order-top-bar .order-actions {
        flex: 0 0 100%;
        display: flex;
        flex-direction: row;
        justify-content: center !important;
        align-items: center;
        gap: 0 8px;
        margin-bottom: 4px !important;
    }
    .drink-order-top-bar button,
    .drink-order-top-bar #clear-drink-selection {
        margin: 0 !important;
    }
}
.drink-order-top-bar > div:first-child,
.drink-order-top-bar .order-actions {
    flex: 1 1 0;
    min-width: 0;
    display: flex;
    align-items: stretch;
    justify-content: stretch;
    gap: 8px;
    height: 100%;
}
.drink-order-top-bar > div:first-child > *,
.drink-order-top-bar .order-actions > * {
    min-width: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}
.drink-order-top-bar > div:first-child > button,
.drink-order-top-bar .order-actions > button {
    flex: 0 0 auto;
}
.drink-order-top-bar > div:first-child > #current-balance-display,
.drink-order-top-bar .order-actions > .default-button:not([type="button"]) {
    flex: 1 1 0;
}
.drink-tiles-wrapper {
    justify-content: center;
    align-items: flex-start;
    display: flex;
    flex-wrap: wrap;
    gap: 24px;
}
@media (max-width: 700px) {
    .drink-tiles-wrapper {
        gap: 24px;
        justify-content: center;
    }
    .drink-tile {
        width: calc(50% - 12px) !important;
        flex: 0 0 calc(50% - 12px) !important;
        height: auto;
        margin: 0 !important;
        box-sizing: border-box;
    }
}
@media (max-width: 500px) {
    .drink-tiles-wrapper {
        gap: 8px;
        justify-content: center !important;
    }
    .drink-tile {
        width: calc(50% - 4px) !important;
        flex: 0 0 calc(50% - 4px) !important;
        margin: 0 !important;
        box-sizing: border-box;
    }
}
.default-table th {
    padding: 8px 16px 8px 0;
    height: 32px;
    font-weight: bold;
    font-size: 1em;
}
.default-table td {
    padding-right: 16px;
    padding-bottom: 4px;
    height: 20px;
}
.order-actions {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
}
.drink-order-top-bar .order-actions > .default-button[type="submit"] {
    flex: 1 1 0;
    min-width: 0;
}
.order-actions > .default-button:not([type="submit"]) {
    flex: 0 0 auto;
}
#logout-timer {
    cursor: pointer;
}
</style>

<?php if (isset($drinks)): ?>
    <div class="separator-small"></div>
    <div class="drink-order-top-bar" style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 0 8px;">
        <div style="flex: 1 1 auto; display: flex; justify-content: center; align-items: center;">
            <button id="scan-barcode-btn" type="button" class="default-button" title="<?= $this->t('Scan Barcode') ?>" style="font-size: 1.1em; font-weight: bold; background: #e3f0fa; color: #2196f3; border: 1px solid #2196f3; border-radius: 6px; padding: 4px; display: flex; align-items: center; gap: 0; margin-left: 0; min-width: 0; width: 52px; height: 44px; justify-content: center;">
                <svg width="36" height="28" viewBox="0 0 28 22" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <rect x="1" y="1" width="26" height="20" rx="3" stroke="#2196f3" stroke-width="2" fill="#e3f0fa"/>
                    <rect x="4" y="4" width="2" height="14" fill="#2196f3"/>
                    <rect x="8" y="4" width="1" height="14" fill="#2196f3"/>
                    <rect x="11" y="4" width="2" height="14" fill="#2196f3"/>
                    <rect x="15" y="4" width="1" height="14" fill="#2196f3"/>
                    <rect x="18" y="4" width="2" height="14" fill="#2196f3"/>
                    <rect x="22" y="4" width="1" height="14" fill="#2196f3"/>
                </svg>
                <span class="sr-only" style="position:absolute;left:-9999px;"> <?= $this->t('Scan Barcode') ?> </span>
            </button>
            <div id="current-balance-display" class="<?= $currentBalance < 0 ? 'negative-balance' : '' ?>" style="font-size: 1.1em; font-weight: bold; color: #2196f3; background: #f5faff; border-radius: 6px; padding: 4px 14px; display: inline-flex; align-items: center; border: 1px solid #2196f3; height: 36px; min-height: 36px;">
                <?= $this->t('STC SB-Theke - Guthaben:') ?>
                <span id="current-balance-value" style="margin-left: 8px; color: <?php if ($currentBalance < 0) { echo '#d32f2f'; } else { echo $currentBalance < 0 ? '#d32f2f' : '#2196f3'; } ?>; font-size: 1.15em; font-weight: bold;">
                    <?php if ($simpleOrderMode): ?>
                        <?= $currentBalance > 0 ? '> 0 €' : '< 0 €' ?>
                    <?php else: ?>
                        <?= $this->priceFormat($currentBalance * 100.0, null, null, null, null, null, true, true, false) ?>
                    <?php endif; ?>
                </span>
            </div>
        </div>
        <div class="order-actions" style="flex: 1 1 auto; display: flex; justify-content: center; align-items: center;">
            <button type="submit" form="drink-order-form" name="drink_order_submit" value="1" class="default-button" style="font-size: 1.2em; padding: 12px 32px; min-width: 120px; font-weight: bold; display: flex; align-items: center; gap: 12px; flex: 1 1 0; height: 44px; min-height: 44px;">
                <span style="font-weight: bold;"><?= $this->t('Buchen') ?></span>
                <span id="drink-order-total" style="font-weight: bold; color: #2196f3; font-size: 1em;"> <?= $this->priceFormat(0) ?> </span>
            </button>
            <button type="button" id="clear-drink-selection" title="<?= $this->escapeHtmlAttr($this->t('Clear selection')) ?>" class="default-button" style="background: #e3f0fa; color: #2196f3; border: 1px solid #2196f3; border-radius: 6px; padding: 4px; min-width: 0; width: 52px; height: 44px; display: flex; align-items: center; justify-content: center; margin-right: 0; cursor: pointer;">
                <svg width="32" height="32" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <rect x="1" y="1" width="20" height="20" rx="4" stroke="#2196f3" stroke-width="2" fill="#e3f0fa"/>
                    <line x1="6" y1="6" x2="16" y2="16" stroke="#2196f3" stroke-width="2.2" stroke-linecap="round"/>
                    <line x1="16" y1="6" x2="6" y2="16" stroke="#2196f3" stroke-width="2.2" stroke-linecap="round"/>
                </svg>
            </button>
        </div>
    </div>
    <div id="barcode-scanner-modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.45); z-index:2000; align-items:center; justify-content:center;">
        <div id="barcode-scanner-container" style="background:#fff; border:2px solid #2196f3; border-radius:8px; padding:12px; max-width:400px; width:90vw; margin:auto; position:relative; box-shadow:0 8px 32px rgba(0,0,0,0.18);">
            <!-- Scanner UI will be injected here -->
        </div>
    </div>
    <script src="https://unpkg.com/@zxing/library@0.20.0/umd/index.min.js"></script>
    <script>
    // Barcode scan logic
    const scanBtn = document.getElementById('scan-barcode-btn');
    const scannerModal = document.getElementById('barcode-scanner-modal');
    const scannerContainer = document.getElementById('barcode-scanner-container');
    let codeReader = null;

    scanBtn.addEventListener('click', async function() {
        // Simulation mode: if ?simulate_barcode=1 is in the URL, feed test code directly and do NOT open scanner UI
        if (window.location.search.indexOf('simulate_barcode=1') !== -1) {
            handleBarcodeResult('4002798021294');
            return;
        }
        if (scannerModal.style.display === 'flex') {
            stopBarcodeScanner();
            return;
        }
        scannerModal.style.display = 'flex';
        scannerContainer.innerHTML = '<div id="barcode-video"></div><div style="margin-top:8px; text-align:center;"><button id="close-barcode-scanner" type="button" style="font-size:1em;">'+
            '<?= $this->t('Close') ?>'+
            '</button></div>';
        const ZXing = window.ZXing;
        if (!ZXing || !ZXing.BrowserMultiFormatReader) {
            scannerContainer.innerHTML = '<div style="color:red;">Barcode scanner library not loaded.</div>';
            return;
        }
        // Only allow linear barcode formats (no QR codes)
        const allowedFormats = [
            ZXing.BarcodeFormat.CODE_128,
            ZXing.BarcodeFormat.CODE_39,
            ZXing.BarcodeFormat.CODE_93,
            ZXing.BarcodeFormat.EAN_13,
            ZXing.BarcodeFormat.EAN_8,
            ZXing.BarcodeFormat.UPC_A,
            ZXing.BarcodeFormat.UPC_E,
            ZXing.BarcodeFormat.ITF,
            ZXing.BarcodeFormat.CODABAR
        ];
        codeReader = new ZXing.BrowserMultiFormatReader();
        const hints = new Map();
        hints.set(ZXing.DecodeHintType.POSSIBLE_FORMATS, allowedFormats);
        try {
            const videoElem = document.createElement('video');
            videoElem.setAttribute('autoplay', 'true');
            videoElem.setAttribute('playsinline', 'true');
            videoElem.style.width = '100%';
            document.getElementById('barcode-video').appendChild(videoElem);
            // Pass hints as the third argument
            const result = await codeReader.decodeOnceFromVideoDevice(undefined, videoElem, hints);
            if (result && result.text) {
                handleBarcodeResult(result.text);
            }
        } catch (e) {
            scannerContainer.innerHTML = '<div style="color:red; margin:16px;">'+
                '<?= $this->t('Camera error or permission denied.') ?>'+
                '</div>';
        }
    });
    function stopBarcodeScanner() {
        scannerModal.style.display = 'none';
        scannerContainer.innerHTML = '';
        if (codeReader) {
            codeReader.reset();
            codeReader = null;
        }
    }
    document.addEventListener('click', function(e) {
        if (e.target && e.target.id === 'close-barcode-scanner') {
            stopBarcodeScanner();
        }
        // Also close modal if user clicks outside the scanner box
        if (e.target && e.target.id === 'barcode-scanner-modal') {
            stopBarcodeScanner();
        }
    });
    function handleBarcodeResult(barcode) {
        stopBarcodeScanner();
        fetch('account/barcode-lookup?barcode=' + encodeURIComponent(barcode))
            .then(response => response.json())
            .then(data => {
                if (data && data.drink_id) {
                    var input = document.getElementById('input-' + data.drink_id);
                    var badge = document.getElementById('badge-' + data.drink_id);
                    var tile = input ? input.closest('.drink-tile') : null;
                    // If tile is hidden, switch to 'All' group
                    if (tile && tile.style.display === 'none') {
                        var allBtn = document.querySelector('.category-btn[data-category="all"]');
                        if (allBtn) allBtn.click();
                        // After switching, reselect elements (DOM may have changed)
                        input = document.getElementById('input-' + data.drink_id);
                        badge = document.getElementById('badge-' + data.drink_id);
                        tile = input ? input.closest('.drink-tile') : null;
                        // Sort by order count after switching group
                        sortDrinkTiles();
                    }
                    var val = parseInt(input.value) || 0;
                    val++;
                    input.value = val;
                    badge.textContent = val;
                    badge.style.visibility = val > 0 ? 'visible' : 'hidden';
                    if (typeof updateDrinkOrderTotal === 'function') updateDrinkOrderTotal();
                    sortDrinkTiles(); // Only sort after barcode scan
                } else {
                    alert('<?= $this->t('Unknown barcode:') ?> ' + barcode);
                }
            })
            .catch(() => {
                alert('<?= $this->t('Unknown barcode:') ?> ' + barcode);
            });
    }
    </script>
    <style>
    @media (max-width: 900px) {
        .order-top-bar {
            flex-direction: column;
            align-items: stretch !important;
            gap: 10px 0 !important;
        }
        .order-top-bar > * {
            width: 100% !important;
            min-width: 0 !important;
            justify-content: center !important;
            margin-right: 0 !important;
        }
        .order-top-bar h2 {
            text-align: center;
        }
        #current-balance-display {
            justify-content: center;
        }
        .order-top-bar button.default-button {
            justify-content: center;
        }
    }
    </style>
    <?php if (isset($this->drinkCategories) && count($this->drinkCategories) > 0): ?>
    <div style="height: 18px;"></div>
    <div style="display: flex; justify-content: center; width: 100%;">
        <div id="drink-category-selection" style="display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 16px;">
            <button type="button" class="category-btn" data-category="all" style="padding: 6px 18px; border-radius: 6px; border: 1px solid #2196f3; background: #e3f0fa; color: #2196f3; font-weight: bold; cursor: pointer;">All</button>
            <button type="button" class="category-btn" data-category="favourites" style="padding: 6px 18px; border-radius: 6px; border: 1px solid #2196f3; background: #fff; color: #2196f3; font-weight: bold; cursor: pointer;">Meine Favoriten</button>
            <?php foreach ($this->drinkCategories as $cat): ?>
                <button type="button" class="category-btn" data-category="<?= (int)$cat['id'] ?>" style="padding: 6px 18px; border-radius: 6px; border: 1px solid #2196f3; background: #fff; color: #2196f3; font-weight: bold; cursor: pointer;">
                    <?= $this->escapeHtml($cat['name']) ?>
                </button>
            <?php endforeach; ?>
        </div>
    </div>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        var catBtns = document.querySelectorAll('.category-btn');
        var wrapper = document.querySelector('.drink-tiles-wrapper');
        var tiles = Array.from(wrapper.querySelectorAll('.drink-tile'));
        // Store original order
        tiles.forEach(function(tile, idx) {
            tile.setAttribute('data-original-index', idx);
        });
        catBtns.forEach(function(btn) {
            btn.addEventListener('click', function() {
                catBtns.forEach(function(b) { b.style.background = '#fff'; });
                this.style.background = '#e3f0fa';
                var cat = this.getAttribute('data-category');
                var allTiles = Array.from(wrapper.querySelectorAll('.drink-tile'));
                if (cat === 'favourites') {
                    // Show only favourites, sort by current order count, then favourite-count, then name
                    var favTiles = allTiles.filter(function(tile) {
                        return parseInt(tile.getAttribute('favourite-count')) > 0;
                    });
                    favTiles.sort(function(a, b) {
                        var inputA = a.querySelector('input[type="hidden"]');
                        var inputB = b.querySelector('input[type="hidden"]');
                        var countA = parseInt(inputA.value) || 0;
                        var countB = parseInt(inputB.value) || 0;
                        if (countA !== countB) return countB - countA;
                        var fa = parseInt(a.getAttribute('favourite-count')) || 0;
                        var fb = parseInt(b.getAttribute('favourite-count')) || 0;
                        if (fa !== fb) return fb - fa;
                        var na = a.querySelector('.drink-name').textContent.trim().toLowerCase();
                        var nb = b.querySelector('.drink-name').textContent.trim().toLowerCase();
                        return na.localeCompare(nb);
                    });
                    // Hide all, then show and append sorted favs
                    allTiles.forEach(function(tile) { tile.style.display = 'none'; });
                    favTiles.forEach(function(tile) {
                        tile.style.display = '';
                        wrapper.appendChild(tile);
                    });
                } else {
                    // Show all or by category, restore original order
                    allTiles.sort(function(a, b) {
                        return (parseInt(a.getAttribute('data-original-index')) || 0) - (parseInt(b.getAttribute('data-original-index')) || 0);
                    });
                    allTiles.forEach(function(tile) {
                        if (cat === 'all' || tile.getAttribute('data-category') === cat) {
                            tile.style.display = '';
                        } else {
                            tile.style.display = 'none';
                        }
                        wrapper.appendChild(tile);
                    });
                    // Sort by order count after switching group
                    sortDrinkTiles();
                }
            });
        });
        // Optionally, trigger click on 'All' to initialize
        var allBtn = document.querySelector('.category-btn[data-category="all"]');
        if (allBtn) allBtn.click();
    });
    </script>
    <?php endif; ?>
    <form method="post" id="drink-order-form" onsubmit="return confirmDrinkOrder();">
        <div style="height: 16px;"></div>
        <div class="drink-tiles-wrapper">
            <?php
            // Sort drinks by total ordered count descending for the order form
            if (isset($drinks) && isset($this->drinkHistory) && is_array($drinks) && is_array($this->drinkHistory)) {
                $drinkOrderCounts = array();
                foreach ($this->drinkHistory as $entry) {
                    if ($entry['type'] === 'order' && isset($entry['drink_id']) && empty($entry['deleted'])) { // skip deleted orders
                        $drinkId = $entry['drink_id'];
                        $qty = isset($entry['quantity']) ? (int)$entry['quantity'] : 1;
                        if (!isset($drinkOrderCounts[$drinkId])) $drinkOrderCounts[$drinkId] = 0;
                        $drinkOrderCounts[$drinkId] += $qty;
                    }
                }
                usort($drinks, function($a, $b) use ($drinkOrderCounts) {
                    $countA = isset($drinkOrderCounts[$a['id']]) ? $drinkOrderCounts[$a['id']] : 0;
                    $countB = isset($drinkOrderCounts[$b['id']]) ? $drinkOrderCounts[$b['id']] : 0;
                    // Descending order
                    if ($countA === $countB) return strcasecmp($a['name'], $b['name']); // fallback: name
                    return $countB - $countA;
                });
            }
            foreach ($drinks as $drink): ?>
                <div class="drink-tile" data-category="<?= (int)($drink['category'] ?? 0) ?>" favourite-count="<?= (int)($drink['user_total_count'] ?? 0) ?>">
                    <?php
                    $imgFile = isset($drink['image']) && $drink['image'] ? $drink['image'] : 'drink-placeholder.png';
                    $imgPath = $this->basePath('/imgs/branding/' . $imgFile);
                    ?>
                    <div class="drink-controls">
                        <button type="button" class="drink-minus" data-drink-id="<?= (int)$drink['id'] ?>" style="background: #eee; border: none; border-radius: 4px; width: 28px; height: 28px; font-size: 18px; font-weight: bold; color: #2196f3; cursor: pointer; margin-right: 0;">–</button>
                        <span style="flex: 1 1 auto; display: flex; align-items: center; justify-content: center; min-width: 32px;">
                            <span class="drink-count-badge" id="badge-<?= (int)$drink['id'] ?>" style="background: #2196f3; color: #fff; border-radius: 10px; padding: 5px 16px; font-size: 16px; font-weight: bold; min-width: 32px; min-height: 28px; text-align: center; box-shadow: 0 1px 2px rgba(0,0,0,0.04); transition: background 0.2s, color 0.2s; visibility: hidden;">0</span>
                        </span>
                        <button type="button" class="drink-plus" data-drink-id="<?= (int)$drink['id'] ?>" style="background: #eee; border: none; border-radius: 4px; width: 28px; height: 28px; font-size: 18px; font-weight: bold; color: #2196f3; cursor: pointer; margin-left: 0;">+</button>
                    </div>
                    <div class="drink-image-frame">
                        <img src="<?= $imgPath ?>" alt="<?= $this->escapeHtmlAttr($drink['name']) ?>" />
                    </div>
                    <div class="drink-info">
                        <div class="drink-name">
                            <?= $this->escapeHtml($drink['name']) ?>
                        </div>
                        <div class="drink-price">
                            <?= $this->priceFormat($drink['price'] * 100.0, null, null, null, null, null, true, false, false) ?>
                        </div>
                    </div>
                    <input type="hidden" name="drink_counts[<?= (int)$drink['id'] ?>]" id="input-<?= (int)$drink['id'] ?>" value="0" data-price="<?= htmlspecialchars($drink['price'], ENT_QUOTES) ?>" />
                </div>
            <?php endforeach; ?>
        </div>
        <div style="height: 24px;"></div>
    </form>
    <script>
    // Drink order tile logic
    // --- Dynamic sorting of drink tiles by count (JS) ---
    function sortDrinkTiles() {
        var wrapper = document.querySelector('.drink-tiles-wrapper');
        if (!wrapper) return;
        var tiles = Array.from(wrapper.querySelectorAll('.drink-tile'));
        tiles.sort(function(a, b) {
            var inputA = a.querySelector('input[type="hidden"]');
            var inputB = b.querySelector('input[type="hidden"]');
            var countA = parseInt(inputA.value) || 0;
            var countB = parseInt(inputB.value) || 0;
//            if (countA === countB) {
//                var nameA = a.querySelector('.drink-name').textContent.trim().toLowerCase();
//                var nameB = b.querySelector('.drink-name').textContent.trim().toLowerCase();
//                return nameA.localeCompare(nameB);
//            }
            return countB - countA;
        });
        tiles.forEach(function(tile) { wrapper.appendChild(tile); });
    }
    // Call after every count change
    function updateDrinkOrderTotal() {
        var total = 0;
        var anySelected = false;
        document.querySelectorAll('input[id^="input-"]').forEach(function(input) {
            var count = parseInt(input.value) || 0;
            var price = parseFloat(input.getAttribute('data-price')) || 0;
            total += count * price;
            if (count > 0) anySelected = true;
        });
        // Format as currency (EUR, 2 decimals, comma as decimal separator)
        var formatted = (total).toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
        document.getElementById('drink-order-total').textContent = formatted;

        // Enable/disable booking button
        var bookBtn = document.querySelector('button[type="submit"][form="drink-order-form"]');
        if (bookBtn) bookBtn.disabled = !anySelected;

        // Update current balance preview
        var initialBalance = parseFloat("<?= $currentBalance ?>");
        var newBalance = initialBalance - total;
        var formattedBalance = "";
        if (window.SIMPLE_ORDER_MODE) {
            formattedBalance = newBalance > 0 ? " > 0 €" : " < 0 €";
        } else {
            formattedBalance = newBalance.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
        }
        var balanceElem = document.getElementById('current-balance-value');
        var balanceBox = document.getElementById('current-balance-display');
        balanceElem.textContent = formattedBalance;
        balanceElem.style.color = (newBalance < 0) ? '#d32f2f' : '#2196f3';
        if (newBalance < 0) {
            balanceBox.classList.add('negative-balance');
        } else {
            balanceBox.classList.remove('negative-balance');
        }
    }
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.drink-plus').forEach(function(btn) {
            btn.addEventListener('click', function() {
                var id = this.getAttribute('data-drink-id');
                var input = document.getElementById('input-' + id);
                var badge = document.getElementById('badge-' + id);
                var val = parseInt(input.value) || 0;
                val++;
                input.value = val;
                badge.textContent = val;
                badge.style.visibility = val > 0 ? 'visible' : 'hidden';
                updateDrinkOrderTotal();
            });
        });
        document.querySelectorAll('.drink-minus').forEach(function(btn) {
            btn.addEventListener('click', function() {
                var id = this.getAttribute('data-drink-id');
                var input = document.getElementById('input-' + id);
                var badge = document.getElementById('badge-' + id);
                var val = parseInt(input.value) || 0;
                if (val > 0) val--;
                input.value = val;
                badge.textContent = val;
                badge.style.visibility = val > 0 ? 'visible' : 'hidden';
                updateDrinkOrderTotal();
            });
        });
    });
    // --- Shared clear selection and logout logic (global scope) ---
    function clearSelectionAndLogout() {
        if (!confirm('<?= $this->t('Bist Du sicher, dass Du Deine Getränkeauswahl löschen möchtest? Dadurch wird Deine aktuelle Bestellung zurückgesetzt.') ?>')) {
            return;
        }
        document.querySelectorAll('input[id^="input-"]').forEach(function(input) {
            input.value = 0;
            var id = input.id.replace('input-', '');
            var badge = document.getElementById('badge-' + id);
            badge.textContent = 0;
            badge.style.visibility = 'hidden';
        });
        if (typeof updateDrinkOrderTotal === 'function') updateDrinkOrderTotal();
        // In simple-order mode, log out (redirect to login)
        if (window.SIMPLE_ORDER_MODE) {
            window.location.href = '<?= $this->url("user/simple-login") ?>';
        }
    }
    document.addEventListener('DOMContentLoaded', function() {
        var clearBtn = document.getElementById('clear-drink-selection');
        if (clearBtn) {
            clearBtn.addEventListener('click', clearSelectionAndLogout);
        }
        // Initialize all badges to 0 and hidden
        document.querySelectorAll('input[id^="input-"]').forEach(function(input) {
            var id = input.id.replace('input-', '');
            var badge = document.getElementById('badge-' + id);
            badge.textContent = input.value;
            badge.style.visibility = (parseInt(input.value) > 0) ? 'visible' : 'hidden';
        });
        updateDrinkOrderTotal();
    });
    function confirmDrinkOrder() {
        var items = [];
        var total = 0;
        document.querySelectorAll('input[id^="input-"]').forEach(function(input) {
            var count = parseInt(input.value) || 0;
            if (count > 0) {
                var id = input.id.replace('input-', '');
                var nameElem = document.querySelector('.drink-tile [id="input-' + id + '"]').closest('.drink-tile').querySelector('.drink-name');
                var name = nameElem ? nameElem.textContent.trim() : id;
                var price = parseFloat(input.getAttribute('data-price')) || 0;
                var itemTotal = count * price;
                total += itemTotal;
                items.push(name + ' x ' + count + ' = ' + itemTotal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }));
            }
        });
        if (items.length === 0) {
            return confirm('<?= $this->t('Keine Getränke ausgewählt') ?>');
        }
        var msg = '<?= $this->t('Buchung bestätigen:') ?>\n\n' + items.join('\n') + '\n---------------------\n<?= $this->t('Gesamt:') ?> ' + total.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
        return confirm(msg);
    }
    </script>
<?php endif; ?>

<?php
$simpleOrderMode = isset($this->simpleOrderMode) ? $this->simpleOrderMode : false;
$showHistory = isset($this->drinkHistory) && (count($this->drinkHistory) > 0);
?>
<?php if ($showHistory && (!$simpleOrderMode || $simpleOrderMode)) : ?>
<div id="order-history-section">
    <h2><?= $this->t('Käufe und Einzahlungen') ?></h2>
    <div style="margin-bottom: 18px;"></div>
    <table class="default-table middle-table">
        <tr style="background: #e3f0fa;">
            <th style="text-align:left; width:24px;"></th>
            <th style="text-align:left;">
                <?= $this->t('Aktion') ?>
            </th>
            <th style="text-align:left;">
                <?= $this->t('#') ?>
            </th>
            <th style="text-align:left;">
                <?= $this->t('Price') ?>
            </th>
            <th style="text-align:left;">
                <?= $this->t('Total') ?>
            </th>
            <?php if (!$simpleOrderMode): ?>
            <th style="text-align:left;">
                <?= $this->t('Kontostand') ?>
            </th>
            <?php endif; ?>
        </tr>
        <?php
        $drinkHistory = array_reverse($this->drinkHistory);
        $balance = 0;
        $rows = [];
        // Calculate balance from bottom up
        for ($i = count($drinkHistory) - 1; $i >= 0; $i--) {
            $entry = $drinkHistory[$i];
            if ($entry['type'] === 'deposit') {
                $balance += $entry['amount'];
            } else if ($entry['type'] === 'order') {
                if (!empty($entry['deleted'])) continue; // skip deleted orders for balance
                $balance -= $entry['total'];
            }
            $rows[$i] = $balance;
        }
        $rows = array_reverse($rows);
        // Prepare a flat list of top-level entries: day groups and deposits, sorted newest to oldest
        $entriesByDay = [];
        $deposits = [];
        foreach ($drinkHistory as $entry) {
            if ($entry['type'] === 'deposit') {
                $deposits[] = $entry;
            } else if ($entry['type'] === 'order') {
                $date = date('Y-m-d', strtotime($entry['datetime']));
                if (!isset($entriesByDay[$date])) {
                    $entriesByDay[$date] = [];
                }
                $entriesByDay[$date][] = $entry;
            }
        }
        // Build a flat list of top-level items (date group or deposit), sorted oldest to newest for math
        $topLevel = [];
        if ($simpleOrderMode) {
            $now = time();
            $cutoff = $now - 18 * 3600; // 18 hours ago
            foreach ($entriesByDay as $date => $orders) {
                // Filter orders in this group to only those within last 18 hours
                $recentOrders = array_filter($orders, function($entry) use ($cutoff) {
                    return strtotime($entry['datetime']) >= $cutoff;
                });
                if (count($recentOrders) > 0) {
                    $topLevel[] = [ 'type' => 'day', 'date' => $date, 'orders' => $recentOrders ];
                }
            }
        } else {
            foreach ($entriesByDay as $date => $orders) {
                $topLevel[] = [ 'type' => 'day', 'date' => $date, 'orders' => $orders ];
            }
            foreach ($deposits as $deposit) {
                $topLevel[] = [ 'type' => 'deposit', 'datetime' => $deposit['datetime'], 'entry' => $deposit ];
            }
        }
        // Sort by date/datetime ascending (oldest to newest)
        usort($topLevel, function($a, $b) {
            $aTime = ($a['type'] === 'day') ? strtotime($a['date'] . ' 23:59:59') : strtotime($a['entry']['datetime']);
            $bTime = ($b['type'] === 'day') ? strtotime($b['date'] . ' 23:59:59') : strtotime($b['entry']['datetime']);
            return $aTime <=> $bTime;
        });
        // Calculate balances for each top-level group
        $balance = 0;
        $groupBalances = [];
        foreach ($topLevel as $idx => $item) {
            if ($item['type'] === 'day') {
                $dayTotalAmount = 0;
                foreach ($item['orders'] as $entry) {
                    if (!empty($entry['deleted'])) continue; // skip deleted orders for group balance
                    $dayTotalAmount += $entry['total'];
                }
                $balance -= $dayTotalAmount;
                $groupBalances[$idx] = $balance;
            } else if ($item['type'] === 'deposit') {
                $amount = $item['entry']['amount'];
                $balance += $amount;
                $groupBalances[$idx] = $balance;
            }
        }
        // Now render from newest to oldest
        $renderOrder = array_reverse(array_keys($topLevel));
        $groupIndex = 0;
        foreach ($renderOrder as $i) {
            $item = $topLevel[$i];
            $balanceAfter = $groupBalances[$i];
            if ($item['type'] === 'day') {
                $date = $item['date'];
                $orders = $item['orders'];
                $collapsedId = 'order-day-' . $groupIndex;
                $isOpen = ($groupIndex === 0);
                $dayDrinkSum = 0;
                $dayTotalAmount = 0;
                foreach ($orders as $entry) {
                    if (!empty($entry['deleted'])) continue; // skip deleted orders for day sum
                    $dayDrinkSum += (int)$entry['quantity'];
                    $dayTotalAmount += $entry['total'];
                }
                echo '<tr class="order-day-header" style="background:#f5faff; cursor:pointer;" data-group="' . $collapsedId . '">';
                echo '<td style="width:24px; text-align:center;">';
                echo '<span class="collapse-toggle" data-group="' . $collapsedId . '" style="display:inline-block; width:20px; height:20px; line-height:20px; border-radius:50%; background:#2196f3; color:#fff; font-weight:bold; cursor:pointer;">' . ($isOpen ? '–' : '+') . '</span>';
                echo '</td>';
                echo '<td style="font-weight:bold;">' . $this->escapeHtml($date) . ' - ' . $this->t('Käufe') . '</td>';
                echo '<td style="font-weight:bold;">' . $dayDrinkSum . '</td>';
                echo '<td style="font-weight:bold;"></td>';
                echo '<td style="font-weight:bold;">' . $this->priceFormat(-$dayTotalAmount * 100.0, null, null, null, null, null, true, false, false) . '</td>';
                if (!$simpleOrderMode) echo '<td style="font-weight:bold;'.($balanceAfter < 0 ? ' color:#d32f2f;' : '').'">' . $this->priceFormat($balanceAfter * 100.0, null, null, null, null, null, true, true, false) . '</td>';
                echo '</tr>';
                // Sort orders inside the group newest to oldest
                $ordersSorted = $orders;
                usort($ordersSorted, function($a, $b) {
                    return strtotime($b['datetime']) <=> strtotime($a['datetime']);
                });
                foreach ($ordersSorted as $entry) {
                    $time = date('H:i', strtotime($entry['datetime']));
                    $rowStyle = $isOpen ? '' : 'display:none;';
                    $isDeleted = $entry['deleted'];
                    $showCancel = false;
                    $orderId = $entry['id'];
                    if ($orderId && isset($entry['datetime']) && !$isDeleted) {
                        $orderTime = strtotime($entry['datetime']);
                        $now = time();
                        if ($now - $orderTime < $drinkOrderCancelWindow) { // use variable
                            $showCancel = true;
                        }
                    }
                    $strikeOpen = $isDeleted ? '<span style="text-decoration:line-through; color:#b0b0b0;">' : '';
                    $strikeClose = $isDeleted ? '</span>' : '';
                    echo '<tr class="order-day-row' . ($isDeleted ? ' order-deleted-row' : '') . '" data-group="' . $collapsedId . '" style="background:#fafdff;' . $rowStyle . '">';
                    echo '<td style="color:#888; font-size:0.95em; text-align:center; position:relative;">' . $time;
                    if ($showCancel) {
                        echo '<button class="order-cancel-btn" data-order-id="' . htmlspecialchars($orderId) . '" title="' . $this->t('Bestellung stornieren') . '" style="position:absolute; right:2px; top:2px; width:18px; height:18px; border:none; background:transparent; color:#d32f2f; font-size:15px; font-weight:bold; cursor:pointer; line-height:16px; padding:0;">&times;</button>';
                    }
                    echo '</td>';
                    echo '<td>' . $strikeOpen . $this->escapeHtml($entry['name']) . $strikeClose . '</td>';
                    echo '<td>' . $strikeOpen . (int)$entry['quantity'] . $strikeClose . '</td>';
                    echo '<td>' . $strikeOpen . $this->priceFormat($entry['price'] * 100.0, null, null, null, null, null, true, false, false) . $strikeClose . '</td>';
                    echo '<td>' . $strikeOpen . $this->priceFormat($entry['total'] * 100.0, null, null, null, null, null, true, false, false) . $strikeClose . '</td>';
                    if (!$simpleOrderMode) echo '<td></td>';
                    echo '</tr>';
                }
                $groupIndex++;
            } else if ($item['type'] === 'deposit') {
                $entry = $item['entry'];
                $date = date('Y-m-d', strtotime($entry['datetime']));
                $amount = $entry['amount'];
                echo '<tr style="background:#fafdff; font-weight:bold;">';
                echo '<td></td>';
                echo '<td>' . $this->escapeHtml($date) . ' - ' . $this->t('Einzahlung') . '</td>';
                echo '<td></td>';
                echo '<td></td>';
                echo '<td>' . $this->priceFormat($amount * 100.0, null, null, null, null, null, true, true, false) . '</td>';
                if (!$simpleOrderMode) echo '<td>' . $this->priceFormat($balanceAfter * 100.0, null, null, null, null, null, true, true, false) . '</td>';
                echo '</tr>';
            }
        }
        ?>
    </table>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.order-day-header').forEach(function(header) {
            header.addEventListener('click', function(e) {
                if (!e.target.classList.contains('collapse-toggle')) {
                    var group = this.getAttribute('data-group');
                    var rows = document.querySelectorAll('.order-day-row[data-group="' + group + '"]');
                    var toggle = this.querySelector('.collapse-toggle');
                    var isOpen = rows.length > 0 && rows[0].style.display !== 'none';
                    rows.forEach(function(row) {
                        row.style.display = isOpen ? 'none' : '';
                    });
                    if (toggle) toggle.textContent = isOpen ? '+' : '–';
                }
            });
        });
        document.querySelectorAll('.collapse-toggle').forEach(function(toggle) {
            toggle.addEventListener('click', function(e) {
                e.stopPropagation();
                var group = this.getAttribute('data-group');
                var rows = document.querySelectorAll('.order-day-row[data-group="' + group + '"]');
                var isOpen = rows.length > 0 && rows[0].style.display !== 'none';
                rows.forEach(function(row) {
                    row.style.display = isOpen ? 'none' : '';
                });
                this.textContent = isOpen ? '+' : '–';
            });
        });
        // Cancel order (X button)
        document.querySelectorAll('.order-cancel-btn').forEach(function(btn) {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                var orderId = this.getAttribute('data-order-id');
                if (!orderId) return;
                if (!confirm('<?= $this->t('Bestellung wirklich stornieren?') ?>')) return;
                var button = this;
                button.disabled = true;
                var dropOrderUrl = (window.SIMPLE_ORDER_MODE ? 'simple-order/drop-order' : 'bookings/drop-order');
                fetch(dropOrderUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: 'order_id=' + encodeURIComponent(orderId)
                })
                .then(function(response) { return response.json(); })
                .then(function(data) {
                    if (data && data.success) {
                        // Refresh the page after successful cancellation, like after confirming an order
                        window.location.reload();
                    } else {
                        var msg = '<?= $this->t('Stornierung fehlgeschlagen.') ?>';
                        if (data && data.error_message) {
                            msg += '\n' + data.error_message;
                        }
                        alert(msg);
                        button.disabled = false;
                    }
                })
                .catch(function(err) {
                    var msg = '<?= $this->t('Stornierung fehlgeschlagen.') ?>';
                    if (err && err.message) {
                        msg += '\n' + err.message;
                    } else if (err) {
                        msg += '\n' + String(err);
                    }
                    alert(msg);
                    button.disabled = false;
                });
            });
        });
    });
    </script>
    <div class="separator-small"></div>
</div>
<?php endif; ?>

<?php if (!$simpleOrderMode): ?>
<div id="drink-stats-section">
<h2><?= $this->t('Getränke-Statistik') ?></h2>
<?php if (!isset($drinkStats) || empty($drinkStats)): ?>
    <div style="color: #888; margin-bottom: 16px;">Keine Getränke-Statistik verfügbar.</div>
<?php else: ?>
    <table class="default-table middle-table" style="margin-bottom:24px;">
        <tr style="background: #e3f0fa;">
            <th><?= $this->t('Getränk') ?></th>
            <th><?= $this->t('Gesamt konsumiert') ?></th>
        </tr>
        <?php foreach ($drinkStats as $row): ?>
            <tr>
                <td><?= $this->escapeHtml($row['name']) ?></td>
                <td><?= (int)$row['total_count'] ?></td>
            </tr>
        <?php endforeach; ?>
    </table>
<?php endif; ?>
</div>
<?php endif; ?>

<?php 
// Only show the Buchungen section if not in simple-order mode
?>
<?php if (!$simpleOrderMode): ?>
<div id="buchungen-section">
    <h1><?= $this->t('My bookings') ?></h1>

    <div class="separator-small"></div>

    <?php if (count($this->bookings) == 0): ?>
        <p><?= sprintf($this->t('You have not booked any %s yet.'), $this->option('subject.square.type.plural')) ?></p>
    <?php elseif (count($this->bookings) == 1): ?>
        <p><?= sprintf($this->t('You have already booked one %s.'), $this->option('subject.square.type')) ?></p>
    <?php else: ?>
        <p><?= sprintf($this->t('You have already booked %s %s.'), count($this->bookings), $this->option('subject.square.type.plural')) ?></p>
    <?php endif; ?>

    <?php if (count($this->bookings) > 0): ?>

        <div class="separator separator-line"></div>

        <style type="text/css">
            .default-table td { padding-right: 16px; padding-bottom: 8px; height: 24px; }
        </style>

        <table class="default-table middle-table">
            <?php

            $todayMentioned = false;

            foreach ($this->bookings as $bid => $booking) {
                $reservations = $booking->needExtra('reservations');

                $bookingDateTimeStart = null;
                $bookingDateTimeEnd = null;

                foreach ($reservations as $reservation) {
                    $tmpDateTimeStart = new DateTime($reservation->need('date') . ' ' . $reservation->need('time_start'));
                    $tmpDateTimeEnd = new DateTime($reservation->need('date') . ' ' . $reservation->need('time_end'));

                    if (is_null($bookingDateTimeStart) || $tmpDateTimeStart < $bookingDateTimeStart) {
                        $bookingDateTimeStart = $tmpDateTimeStart;
                    }

                    if (is_null($bookingDateTimeEnd) || $tmpDateTimeEnd < $bookingDateTimeStart) {
                        $bookingDateTimeEnd = $tmpDateTimeEnd;
                    }
                }

                $cancellable = false;
                $classes = array();

                $square = $this->squareManager->get($booking->need('sid'));

                if ($this->now > $bookingDateTimeStart) {
                    $classes['color'] = 'gray';

                    if (! $todayMentioned) {
                        echo '<tr><td colspan="4"><div class="gray" style="position: relative;">';

                        echo '<div style="position: absolute; left: 50%; top: -16px; margin-left: -23px; padding: 8px; background: #FFF;">' . $this->t('Now') . '</div>';
                        echo '<div class="separator-small separator-line"></div>';

                        echo '</div></td></tr>';

                        $todayMentioned = true;
                    }
                } else {
                    $cancellable = $this->squareValidator->isCancellable($booking);
                }

                $bills = $booking->getExtra('bills');

                if ($bills) {
                    $price = 0;

                    foreach ($bills as $bill) {
                        $price += $bill->need('price');
                    }

                    $pricing = '';
                    $pricing .= '<a href="' . $this->url('user/bookings/bills', ['bid' => $bid]) . '" class="default-button mini-button" style="min-width: 80px;">';
                    $pricing .= $this->priceFormat($price);
                    $pricing .= '</a>';
                } else {
                    $pricing = '<div class="centered-text gray">&middot;</div>';
                }

                echo '<tr>';

                $class = implode(' ', $classes);

                echo '<td class="' . $class . (! isset($classes['color']) ? 'my-highlight' : '') . '">' . $this->option('subject.square.type') . ' ' . $this->t($square->need('name')) . '</td>';
                echo '<td class="' . $class . '">' . $this->dateRange($bookingDateTimeStart, $bookingDateTimeEnd) . '</td>';
                echo '<td class="' . $class . '" style="padding-left: 16px;">' . $pricing . '</td>';

                if ($cancellable) {
                    echo sprintf('<td style="padding-left: 16px;"><a href="%s" class="default-button mini-button">%s</a></td>',
                        $this->url('square/booking/cancellation', [], ['query' => ['bid' => $booking->need('bid')]]), $this->t('Cancel booking'));
                } else {
                    echo '<td class="centered-text gray" style="padding-left: 16px;">&middot;</td>';
                }

                echo '</tr>';
            }

            ?>
        </table>

        <div class="separator-small"></div>

    <?php endif; ?>

    <?php if (isset($this->orderMessage) && $this->orderMessage): ?>
        <div class="info-message"> <?= $this->escapeHtml($this->orderMessage) ?> </div>
    <?php endif; ?>
</div>
<?php endif; ?>

<style>
button.default-button[disabled], button.default-button:disabled {
    opacity: 0.5;
    cursor: not-allowed !important;
    background: #e3f0fa !important;
    color: #b0b0b0 !important;
    border-color: #b0b0b0 !important;
}
</style>
<script>
document.addEventListener('DOMContentLoaded', function() {
        // --- Simple order mode: auto-logout after 1 minute of inactivity ---
        if (window.SIMPLE_ORDER_MODE) {
            var logoutTimeout = null;
            var LOGOUT_DELAY = 5 * 60 * 1000; // 1 minute
            var remaining = LOGOUT_DELAY / 1000;
            var timerElem = document.getElementById('logout-timer');
            if (timerElem) timerElem.style.display = '';
            function updateTimerDisplay() {
                if (!timerElem) return;
                var min = Math.floor(remaining / 60);
                var sec = remaining % 60;
                timerElem.textContent = 'Logout in ' + min + ':' + (sec < 10 ? '0' : '') + sec;
            }
            function resetLogoutTimer() {
                if (logoutTimeout) clearTimeout(logoutTimeout);
                remaining = LOGOUT_DELAY / 1000;
                updateTimerDisplay();
                logoutTimeout = setInterval(function() {
                    remaining--;
                    updateTimerDisplay();
                    if (remaining <= 0) {
                        clearInterval(logoutTimeout);
                        window.location.href = '<?= $this->url("user/simple-login") ?>';
                    }
                }, 1000);
            }
            // Reset timer on any user interaction (only clicks, keydown, touchstart)
            ['click', 'keydown', 'touchstart'].forEach(function(evt) {
                document.addEventListener(evt, function() {
                    if (logoutTimeout) clearInterval(logoutTimeout);
                    resetLogoutTimer();
                }, true);
            });
            if (timerElem) {
                timerElem.addEventListener('click', function(e) {
                    clearSelectionAndLogout();
                });
            }
            resetLogoutTimer();
        }
    });
</script>
<script>
document.addEventListener('DOMContentLoaded', function() {
        // Prevent double-tap zoom on iOS for drink plus/minus buttons
        var plusMinusBtns = document.querySelectorAll('.drink-plus, .drink-minus');
        plusMinusBtns.forEach(function(btn) {
            btn.addEventListener('touchstart', function(e) {
                // Prevent double-tap zoom
                if (e.touches.length > 1) return;
                e.preventDefault();
                // Manually trigger click for accessibility
                btn.click();
            }, { passive: false });
        });
    });
</script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    if (window.SIMPLE_ORDER_MODE) {
        var navTexts = [
            'Verwandte Seiten',
            'Profil',
            'Zurück zu: Kalender'
        ];
        // Only check nav, ul, li, a, and nav-like classes
        var selector = 'nav, ul, li, a, .nav, .menu, .sidebar, .links';
        document.querySelectorAll(selector).forEach(function(el) {
            var text = (el.textContent || '').toLowerCase();
            navTexts.forEach(function(target) {
                if (text.indexOf(target.toLowerCase()) !== -1) {
                    el.style.display = 'none';
                }
            });
        });
    }
});
</script>
